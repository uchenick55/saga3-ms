{"version":3,"file":"static/js/337.1735c293.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/PageItem.js","../node_modules/react-bootstrap/esm/Pagination.js","webpack://saga3-ms/./src/common/Pagination/Pagination.module.css?0156","common/Pagination/PaginationBS.tsx","components/PostsListRender/Functions/postListSortFn.ts","components/PostsListRender/PostsInputRender.tsx","components/PostsListRender/RenderSortButton.tsx","webpack://saga3-ms/./src/components/PostsListRender/Posts.module.css?81fd","components/PostsListRender/CommentItem.tsx","components/PostsListRender/PostItem.tsx","assets/svg/avatar-default.svg","components/PostsListRender/RenderPosts.tsx","components/PostsListRender/Functions/postListPaginFn.ts","components/PostsListRender/Functions/postListSearchFilterFn.ts","components/PostsListRender/PostsListRender.tsx"],"sourcesContent":["/* eslint-disable react/no-multi-comp */\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst PageItem = /*#__PURE__*/React.forwardRef(({\n  active = false,\n  disabled = false,\n  className,\n  style,\n  activeLabel = '(current)',\n  children,\n  ...props\n}, ref) => {\n  const Component = active || disabled ? 'span' : Anchor;\n  return /*#__PURE__*/_jsx(\"li\", {\n    ref: ref,\n    style: style,\n    className: classNames(className, 'page-item', {\n      active,\n      disabled\n    }),\n    children: /*#__PURE__*/_jsxs(Component, {\n      className: \"page-link\",\n      ...props,\n      children: [children, active && activeLabel && /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: activeLabel\n      })]\n    })\n  });\n});\nPageItem.displayName = 'PageItem';\nexport default PageItem;\nfunction createButton(name, defaultValue, label = name) {\n  const Button = /*#__PURE__*/React.forwardRef(({\n    children,\n    ...props\n  }, ref) => /*#__PURE__*/_jsxs(PageItem, {\n    ...props,\n    ref: ref,\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      children: children || defaultValue\n    }), /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    })]\n  }));\n  Button.displayName = name;\n  return Button;\n}\nexport const First = createButton('First', '«');\nexport const Prev = createButton('Prev', '‹', 'Previous');\nexport const Ellipsis = createButton('Ellipsis', '…', 'More');\nexport const Next = createButton('Next', '›');\nexport const Last = createButton('Last', '»');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport PageItem, { Ellipsis, First, Last, Next, Prev } from './PageItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Pagination = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  size,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'pagination');\n  return /*#__PURE__*/_jsx(\"ul\", {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, size && `${decoratedBsPrefix}-${size}`)\n  });\n});\nPagination.displayName = 'Pagination';\nexport default Object.assign(Pagination, {\n  First,\n  Prev,\n  Ellipsis,\n  Item: PageItem,\n  Next,\n  Last\n});","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__JB8vP\"};","import React, {memo, useMemo} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Pagination from 'react-bootstrap/Pagination';\nimport classes from \"./Pagination.module.css\"\nimport {PaginationDataType} from \"../../redux/reducers/all-posts-reducer\";\n\ntype PaginationBSType = PaginationDataType & {\n    TotalPostsCount: number, // общее число постов на сервере\n    setPaginationData: (PaginationData:PaginationDataType) => void// экшн креатор записи в стейт комментариев по ID статьи\n}\n\nconst PaginationBS: React.FC<PaginationBSType> = memo ( (\n    {\n        TotalPostsCount, // общее число постов на сервере\n        PageSize, // количество постов на одной странице\n        CurrentPage, // текущая страница пагинации\n        CurrentRangeLocal, // текущий диапазон пагинации\n        PortionSize,// количество отображаемых страниц пагинации между порциями\n        setPaginationData, // экшн креатор записи в стейт комментариев по ID статьи\n    }) => {\n    console.log( \"PaginationBS\" )\n    const PagesCount = Math.ceil( TotalPostsCount / PageSize ); // сколько всего страниц можно вызвать\n    //с постами пачками по PageSize\n    const pages = []; // определяем массив страниц под все элементы\n    for (let i = 1; i <= PagesCount; i++) {\n        // В этот массив\n        pages.push( i ); // добавляем все страницы элементов\n    }\n\n    const PortionSizeLeft = 1 + PortionSize * (CurrentRangeLocal - 1); // Нижнее значение порций (не меньше 1)\n    const PortionSizeRight = PortionSize * CurrentRangeLocal; // Верхнее значение страниц (не больше PagesCount)\n    const slicedPages2 = pages.filter(\n        // фильтруем весь массив страниц элементов\n        (p) => p >= PortionSizeLeft && p <= PortionSizeRight // оставляем только в заданном диапазоне\n    );\n\n    type setPortionValueType = \"prevPortion\" | \"nextPortion\"\n    const setPortion = (setPortionValue: setPortionValueType) => { // задать текущую порцию пагинации\n        if (setPortionValue === \"prevPortion\" && CurrentRangeLocal > 1) // если мы жмем prevPortion\n        {\n            setPaginationData({\n                PageSize:PageSize, CurrentPage: CurrentPage,\n                PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal -1,// уменьшаем диапазон на 1\n            })\n        }\n        if (setPortionValue === \"nextPortion\") // если мы жмем nextPortion\n        {\n            setPaginationData({\n                PageSize:PageSize, CurrentPage: CurrentPage,\n                PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal +1,// увеличиваем диапазон на 1\n            })\n        }\n    };\n    const PaginationItemMemo = memo( Pagination.Item )\n\n    const renderSlicedPages = ( slicedPages2.map( (p) => { // мапинг отобранного массива\n        return (\n            <PaginationItemMemo // пагинация бутстрапа\n                active={p === CurrentPage} // акттивная страница\n                key={p} // ключ\n                onClick={() => { // по клику\n                    p!== CurrentPage && // кликать по текущей странице пагинации нельзя\n                    setPaginationData({\n                        PageSize:PageSize, CurrentPage: p,// смена текущей страницы после клика\n                        PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal,\n                    })\n                }}\n            >\n                {p} {/*отрисовать номер страницы в пагинации*/}\n            </PaginationItemMemo>\n\n        );\n    } ) )\n\n    return (\n        <div className={classes.pagination}>\n            <Pagination className={\"pagination align-items-center justify-content-center\"}> {/*стиль мышки рука */}\n                <Pagination.Prev disabled={CurrentRangeLocal===1} onClick={() => {\n                    setPortion( \"prevPortion\" )\n                }}/> {/*диапазон пагинации вниз*/}\n                {renderSlicedPages} {/*отрисовка пагинации страниц внутри кнопок*/}\n                <Pagination.Next disabled={Math.ceil(TotalPostsCount/(PageSize*PortionSize)) <= CurrentRangeLocal} onClick={() => {\n                    setPortion( \"nextPortion\" )\n                }}/> {/*диапазон пагинации вверх*/}\n            </Pagination>\n        </div>\n    );\n} );\n\nexport default PaginationBS;\n","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSortFnType = (PostsList: Array<PostType>, sortHeaderDirection: boolean | undefined) => Array<PostType>\r\nconst postListSortFn:postListSortFnType = (PostsList, sortHeaderDirection) => {\r\n    sortHeaderDirection !== undefined &&\r\n    PostsList.sort( (a: PostType, b: PostType) => { // сортируем массив постов по заголовкам\r\n        const partA = a.title.toLowerCase(); // ignore upper and lowercase\r\n        const partB = b.title.toLowerCase(); // ignore upper and lowercase\r\n        return sortHeaderDirection // если прямая/обратная сортировка\r\n            ? (partA > partB) ? 1 : -1 // прямая сортировка\r\n            : (partA < partB) ? 1 : -1 // возврат 1 или -1 для сортировки\r\n    } )\r\n\r\n    return PostsList\r\n}\r\nexport default postListSortFn","import {AllPostsInitialStateType, PaginationDataType} from \"../../redux/reducers/all-posts-reducer\";\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\ntype PostsInputRenderType = {\r\n    SearchPostQuery: string,\r\n    PostsInitialState: AllPostsInitialStateType,\r\n    PaginationData: PaginationDataType,\r\n    setSearchPostQuery: (SearchPostQuery: string) => void\r\n    setPaginationData: (PaginationData: PaginationDataType) => void\r\n}\r\nconst PostsInputRender: React.FC<PostsInputRenderType> = (\r\n    {SearchPostQuery, setSearchPostQuery, setPaginationData, PostsInitialState, PaginationData}) => {\r\n    console.log(\"PostsInputRender\")\r\n    const [QueryTmp, setQueryTmp] = useState(SearchPostQuery)\r\n\r\n    const onChangeSearchPostQuery = (SearchPostQuery: string) => {// задаем новый поисковый запрос\r\n        setSearchPostQuery( SearchPostQuery ) // обновляем локальный стейт\r\n        if (PaginationData.CurrentPage !== 1) {//если страница пагинации !==1\r\n            console.log( \"смена текущей страницы и диапазона пагинации на 1 при поиске\" )\r\n            setPaginationData( PostsInitialState.PaginationData )\r\n        }\r\n    }\r\n\r\n    const onClearField = () => {\r\n        setSearchPostQuery( \"\" )\r\n        setQueryTmp(\"\")\r\n    }\r\n\r\n    useEffect(() => { // задержка ввода input (не реагирует на каждый символ сразу)\r\n        const setSearchPostQueryTmp = QueryTmp // временное значение до задержки\r\n        const id = setTimeout(() => {\r\n            if (setSearchPostQueryTmp === QueryTmp) { // если по истечениию задержки поисковый запрос не изменился\r\n                onChangeSearchPostQuery(QueryTmp) // применить поисковый запрос для фильтрации\r\n            }\r\n        }, 500); // задержка, мс\r\n        return () => {\r\n            clearTimeout(id); //\r\n        };\r\n    }, [QueryTmp]);\r\n\r\n\r\n    return <div>\r\n        <input autoFocus={true} type=\"text\" value={QueryTmp}\r\n               onChange={(e: React.ChangeEvent<HTMLInputElement>) => { setQueryTmp(e.target.value) }}/>\r\n        <div onClick={() =>onClearField()}>x</div>\r\n    </div>\r\n}\r\n\r\nexport default PostsInputRender","import React from \"react\";\r\n\r\ntype RenderSortButtonType = {\r\n    sortHeaderDirection: boolean | undefined,\r\n    setSortHeaderDirection: (sortHeaderDirection: boolean | undefined) => void\r\n}\r\nconst RenderSortButton:React.FC<RenderSortButtonType> = ({sortHeaderDirection, setSortHeaderDirection}) => {\r\n    console.log(\"RenderSortButton\")\r\n    return <button onClick={() => {\r\n        sortHeaderDirection === undefined // если направление сортировки не определено\r\n            ? setSortHeaderDirection( true ) // начальная прямая сортировка массива постов\r\n            : setSortHeaderDirection( !sortHeaderDirection ) // при последующих активациях реверс сортировки\r\n    }}>Сортировка постов по заголовкам\r\n    </button>\r\n}\r\nexport default RenderSortButton","// extracted by mini-css-extract-plugin\nexport default {\"PostItemImage\":\"Posts_PostItemImage__ME8pE\"};","import React, {memo} from \"react\";\r\ntype CommentItemType = {\r\n    \"name\": string// заголовок комментария\r\n    \"email\": string, // почта того, кто оставил комментарий\r\n    \"body\": string // тело комментария\r\n}\r\nconst CommentItem: React.FC<CommentItemType> = memo( ({email, name, body}) => {\r\n    console.log( \"мапинг комментариев\" )\r\n    return <div>\r\n        <b>{email}</b>\r\n        <div>{body}</div>\r\n    </div>\r\n})\r\nexport default CommentItem","import React, {memo, useState} from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport s from \"./Posts.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CommentType} from \"../../common/commonTypes/commonTypes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../redux/store/store-redux\";\r\nimport CommentItem from \"./CommentItem\";\r\n\r\ntype PostItemType = {\r\n    \"userId\": number, // ID автора статей\r\n    \"id\": number, // id статьи\r\n    \"title\": string, // заголовок статьи\r\n    \"body\": string // тело статьи\r\n    Avatar: string // общая картирнка аватара статьи\r\n    getComments: (id: number) => void // колбек для диспатча получить комментарии статьи\r\n}\r\nconst PostItem: React.FC<PostItemType> = memo( ({body, title, userId, Avatar, id, getComments}) => {\r\n    console.log( \"PostItem\" )\r\n    const AllComments: Array<CommentType> =\r\n        useSelector( (state: GlobalStateType) => state.allPosts.AllComments ) // получить комментарии\r\n    const ShowComments: Array<number> =\r\n        useSelector( (state: GlobalStateType) => state.allPosts.ShowComments ) // показать / скрыть комментарии\r\n    const CommentsFilteredById: Array<CommentType> = AllComments.filter( comment => comment.postId === id )\r\n\r\n    return <div>\r\n        <NavLink to={'/user-posts/' + userId}>\r\n            <Image fluid={true} src={Avatar} className={s.PostItemImage}\r\n                   alt={\"Аватар пользователя\"} title={`Все посты пользователя ${userId}`}\r\n            />\r\n        </NavLink>\r\n        <h3> {title} </h3>\r\n        <div> {body} </div>\r\n        <button onClick={() => {\r\n            getComments( id )\r\n        }}>\r\n            Комментарии\r\n        </button>\r\n        {ShowComments.includes(id) && CommentsFilteredById.map( (comment: CommentType) => {\r\n            const {id, name, email, body} = comment\r\n            return <CommentItem key={id} name={name} body={body} email={email}/>\r\n        } )}\r\n\r\n    </div>\r\n} )\r\nexport default PostItem","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgAvatarDefault(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m 8 1 c -1.65625 0 -3 1.34375 -3 3 s 1.34375 3 3 3 s 3 -1.34375 3 -3 s -1.34375 -3 -3 -3 z m -1.5 7 c -2.492188 0 -4.5 2.007812 -4.5 4.5 v 0.5 c 0 1.109375 0.890625 2 2 2 h 8 c 1.109375 0 2 -0.890625 2 -2 v -0.5 c 0 -2.492188 -2.007812 -4.5 -4.5 -4.5 z m 0 0\",\n    fill: \"#2e3436\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvatarDefault);\nexport default __webpack_public_path__ + \"static/media/avatar-default.5dea226660157472ae3b2ae95d31764d.svg\";\nexport { ForwardRef as ReactComponent };","import {PostType} from \"../../common/commonTypes/commonTypes\";\r\nimport React from \"react\";\r\nimport PostItem from \"./PostItem\";\r\nimport Avatar from \"../../assets/svg/avatar-default.svg\";\r\n\r\ntype RenderPostsType = {\r\n    PostsList: Array<PostType>,\r\n    getComments: (postId: number) => void\r\n}\r\nconst RenderPosts:React.FC<RenderPostsType> = ({PostsList, getComments}) => {\r\n    console.log(\"RenderPosts\")\r\n    return <div>{\r\n        PostsList// Во всех отсортированных и отфильтрованых постах с сервера\r\n            .map( (postItem, ind) => { // пробегаем по массиву\r\n                    const {body, id, title, userId} = postItem // извлекаем данные из массива постов\r\n                    return <PostItem key={ind} body={body} title={title}\r\n                                     userId={userId} Avatar={Avatar} id={id}\r\n                                     getComments={getComments}/> // отрисовка одного поста\r\n                }\r\n            )\r\n    }</div>\r\n}\r\nexport default RenderPosts","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListPaginFnType = (\r\n    PostsList: Array<PostType>,\r\n    PageSize: number,\r\n    CurrentPage: number\r\n) => Array<PostType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListPaginFn: postListPaginFnType = (PostsList, PageSize, CurrentPage) => {\r\n    return PostsList.filter( (post: PostType, ind: number) =>\r\n        ind >= (PageSize * (CurrentPage - 1)) && ind < (PageSize * CurrentPage) )\r\n}\r\nexport default postListPaginFn","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSearchFilterFnType = (\r\n    PostsList: Array<PostType>,\r\n    SearchPostQuery:string\r\n) => Array<PostType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListSearchFilterFn: postListSearchFilterFnType = (PostsList, SearchPostQuery) => {\r\n    return PostsList.filter( (post: PostType) => post.title.toLowerCase().includes( SearchPostQuery.toLowerCase() ) )\r\n}\r\nexport default postListSearchFilterFn","import React, {memo, useCallback, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../redux/store/store-redux\";\r\nimport {PostType} from \"../../common/commonTypes/commonTypes\";\r\nimport {\r\n    AllPostsActions,\r\n    PaginationDataType,\r\n    PostsInitialState\r\n} from \"../../redux/reducers/all-posts-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport PaginationBS from \"../../common/Pagination/PaginationBS\";\r\nimport postListSortFn from \"./Functions/postListSortFn\";\r\nimport PostsInputRender from \"./PostsInputRender\";\r\nimport RenderSortButton from \"./RenderSortButton\";\r\nimport RenderPosts from \"./RenderPosts\";\r\nimport postListPaginFn from \"./Functions/postListPaginFn\";\r\nimport postListSearchFilterFn from \"./Functions/postListSearchFilterFn\";\r\n\r\ntype PostsListRenderType = {\r\n    PostsList: Array<PostType>\r\n}\r\nconst PostsListRender: React.FC<PostsListRenderType> = ( ({PostsList}) => {\r\n\r\n    console.log( \"PostsListRender\" )\r\n    const dispatch = useDispatch()\r\n\r\n    //все данные пагинации\r\n    const PaginationData: PaginationDataType = useSelector( (state: GlobalStateType) => state.allPosts.PaginationData )\r\n\r\n    const { // извлекаем переменные из пагинации\r\n        PageSize, CurrentPage, CurrentRangeLocal, PortionSize,\r\n    } = PaginationData\r\n\r\n    const setPaginationData = useCallback ((PaginationData: PaginationDataType) => { // мемоизируем колбек для обновления данных пагинации\r\n        dispatch( setPaginationDataAC( PaginationData ) )\r\n    },[])\r\n\r\n    const {getCommentsByPostIdAC, setPaginationDataAC} = AllPostsActions // извлекаем из экшен креатор на получение комментариев\r\n\r\n    const getComments = useCallback( (postId: number) => { // мемоизируем колбек получения комментариев для ререндеров\r\n        dispatch( getCommentsByPostIdAC( postId ) )\r\n    }, [] )\r\n\r\n    const isFetching: boolean = useSelector( (state: GlobalStateType) => state.app.isFetching ) // статус индикации загрузки\r\n\r\n    const PostsListCopied: Array<PostType> = structuredClone( PostsList ) // полная копия массива постов\r\n\r\n    //// Фильтрация постов по поисковой строке\r\n    const [SearchPostQuery, setSearchPostQuery] = useState<string>( \"\" ) // поисковая строка с колбеком обновления\r\n\r\n    // определение направления сортировки по заголовкам массива постов\r\n    const [sortHeaderDirection, setSortHeaderDirection] = useState<boolean | undefined>( undefined )\r\n\r\n    // фильтруем заголовки на содержание поисковой строки (переводим в один регистр для стравнения)\r\n    let PostsListFiltered: Array<PostType> = postListSearchFilterFn(PostsListCopied, SearchPostQuery)\r\n\r\n    //Список постов после фильтрации и сортировки\r\n    const PostsListFiltSort: Array<PostType> = postListSortFn( PostsListFiltered, sortHeaderDirection )\r\n\r\n    //Список постов после фильтрации, сортировки и пагинации\r\n    const PostsListFiltSortPagin: Array<PostType> = postListPaginFn( PostsListFiltSort, PageSize, CurrentPage )\r\n\r\n    const postInpitRender = <PostsInputRender //поле поиска по заголовкам постов\r\n        SearchPostQuery={SearchPostQuery} setSearchPostQuery={setSearchPostQuery}\r\n        setPaginationData={setPaginationData} PostsInitialState={PostsInitialState}\r\n        PaginationData={PaginationData}\r\n    />\r\n\r\n    const renderSortButton = <RenderSortButton // отрисовка кнопки сортировки\r\n        sortHeaderDirection={sortHeaderDirection} setSortHeaderDirection={setSortHeaderDirection}/>\r\n\r\n    const paginationRender = <PaginationBS // отрисовка пагинации\r\n        TotalPostsCount={PostsListFiltered.length} PageSize={PageSize}\r\n        CurrentPage={CurrentPage} CurrentRangeLocal={CurrentRangeLocal}\r\n        PortionSize={PortionSize} setPaginationData={setPaginationData}\r\n    />\r\n\r\n    const renderPosts = <RenderPosts PostsList={PostsListFiltSortPagin} getComments={getComments}/>\r\n\r\n    return <div>\r\n        {isFetching && <Preloader/>} {/*если идет загрузка, показать прелоадер*/}\r\n\r\n        {postInpitRender} {/*поле поиска по заголовкам постов*/}\r\n\r\n        {renderSortButton} {/*отрисовка кнопки сортировки*/}\r\n\r\n        {paginationRender} {/*пагинация*/}\r\n\r\n        {PostsListFiltSortPagin.length>0\r\n            ? renderPosts //отрисовка постов\r\n            : <div>ничего не найдено</div> }\r\n\r\n    </div>\r\n} )\r\nexport default PostsListRender"],"names":["PageItem","React","_ref","ref","_ref$active","active","_ref$disabled","disabled","className","style","_ref$activeLabel","activeLabel","children","props","_objectWithoutProperties","_excluded","Component","Anchor","_jsx","classNames","_jsxs","_objectSpread","displayName","createButton","name","defaultValue","label","arguments","length","undefined","Button","_ref2","_excluded2","First","Prev","Ellipsis","Next","Last","Pagination","bsPrefix","size","decoratedBsPrefix","useBootstrapPrefix","concat","Object","assign","Item","memo","TotalPostsCount","PageSize","CurrentPage","CurrentRangeLocal","PortionSize","setPaginationData","console","log","PagesCount","Math","ceil","pages","i","push","PortionSizeLeft","PortionSizeRight","slicedPages2","filter","p","setPortion","setPortionValue","PaginationItemMemo","renderSlicedPages","map","onClick","classes","PostsList","sortHeaderDirection","sort","a","b","partA","title","toLowerCase","partB","SearchPostQuery","setSearchPostQuery","PostsInitialState","PaginationData","_useState","useState","_useState2","_slicedToArray","QueryTmp","setQueryTmp","useEffect","setSearchPostQueryTmp","id","setTimeout","onChangeSearchPostQuery","clearTimeout","autoFocus","type","value","onChange","e","target","setSortHeaderDirection","email","body","userId","Avatar","getComments","AllComments","useSelector","state","allPosts","ShowComments","CommentsFilteredById","comment","postId","NavLink","to","Image","fluid","src","s","alt","includes","CommentItem","postItem","ind","PostItem","post","dispatch","useDispatch","useCallback","setPaginationDataAC","getCommentsByPostIdAC","AllPostsActions","isFetching","app","PostsListCopied","structuredClone","_useState3","_useState4","PostsListFiltered","postListSearchFilterFn","PostsListFiltSort","postListSortFn","PostsListFiltSortPagin","postListPaginFn","postInpitRender","PostsInputRender","renderSortButton","RenderSortButton","paginationRender","PaginationBS","renderPosts","RenderPosts","Preloader"],"sourceRoot":""}