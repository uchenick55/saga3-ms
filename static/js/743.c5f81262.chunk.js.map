{"version":3,"file":"static/js/743.c5f81262.chunk.js","mappings":"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","sources":["common/Pagination/PaginationBS.tsx","components/PostsListRender/Functions/postListSortFn.ts","components/PostsListRender/CommentItem.tsx","components/PostsListRender/PostItem.tsx","assets/svg/avatar-default.svg","components/PostsListRender/RenderPosts.tsx","components/PostsListRender/Functions/postListPaginFn.ts","components/PostsListRender/Functions/postListSearchFilterFn.ts","assets/svg/not-found.svg","components/PostsListRender/PostsListRender.tsx","common/hoc/withRouter.jsx","components/UserPosts/UserCard.tsx","components/UserPosts/UserCommon.tsx"],"sourcesContent":["import React, {memo} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport {paginationDataType} from \"../../redux/reducers/all-posts-reducer\";\r\n\r\ntype paginationBSType = paginationDataType & {\r\n    totalPostsCount: number, // общее число постов на сервере\r\n    setPaginationData: (paginationData:paginationDataType) => void// экшн креатор записи в стейт комментариев по ID статьи\r\n}\r\n\r\nconst PaginationBS: React.FC<paginationBSType> = memo ( (\r\n    {\r\n        totalPostsCount, // общее число постов на сервере\r\n        pageSize, // количество постов на одной странице\r\n        сurrentPage, // текущая страница пагинации\r\n        currentRangeLocal, // текущий диапазон пагинации\r\n        portionSize,// количество отображаемых страниц пагинации между порциями\r\n        setPaginationData, // экшн креатор записи в стейт комментариев по ID статьи\r\n    }) => {\r\n    console.log( \"PaginationBS\" )\r\n    const pagesCount = Math.ceil( totalPostsCount / pageSize ); // сколько всего страниц можно вызвать\r\n    //с постами пачками по pageSize\r\n    const pages = []; // определяем массив страниц под все элементы\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        // В этот массив\r\n        pages.push( i ); // добавляем все страницы элементов\r\n    }\r\n\r\n    const portionSizeLeft = 1 + portionSize * (currentRangeLocal - 1); // Нижнее значение порций (не меньше 1)\r\n    const portionSizeRight = portionSize * currentRangeLocal; // Верхнее значение страниц (не больше pagesCount)\r\n    const slicedPages2 = pages.filter(\r\n        // фильтруем весь массив страниц элементов\r\n        (p) => p >= portionSizeLeft && p <= portionSizeRight // оставляем только в заданном диапазоне\r\n    );\r\n\r\n    type setPortionValueType = \"prevPortion\" | \"nextPortion\"\r\n    const setPortion = (setPortionValue: setPortionValueType) => { // задать текущую порцию пагинации\r\n        if (setPortionValue === \"prevPortion\" && currentRangeLocal > 1) // если мы жмем prevPortion\r\n        {\r\n            setPaginationData({\r\n                pageSize:pageSize, сurrentPage: сurrentPage,\r\n                portionSize: portionSize, currentRangeLocal: currentRangeLocal -1,// уменьшаем диапазон на 1\r\n            })\r\n        }\r\n        if (setPortionValue === \"nextPortion\") // если мы жмем nextPortion\r\n        {\r\n            setPaginationData({\r\n                pageSize:pageSize, сurrentPage: сurrentPage,\r\n                portionSize: portionSize, currentRangeLocal: currentRangeLocal +1,// увеличиваем диапазон на 1\r\n            })\r\n        }\r\n    };\r\n    const PaginationItemMemo = memo( Pagination.Item )\r\n\r\n    const renderSlicedPages = ( slicedPages2.map( (p) => { // мапинг отобранного массива\r\n        return (\r\n            <PaginationItemMemo // пагинация бутстрапа\r\n                active={p === сurrentPage} // акттивная страница\r\n                key={p} // ключ\r\n                onClick={() => { // по клику\r\n                    p!== сurrentPage && // кликать по текущей странице пагинации нельзя\r\n                    setPaginationData({\r\n                        pageSize:pageSize, сurrentPage: p,// смена текущей страницы после клика\r\n                        portionSize: portionSize, currentRangeLocal: currentRangeLocal,\r\n                    })\r\n                }}\r\n            >\r\n                {p} {/*отрисовать номер страницы в пагинации*/}\r\n            </PaginationItemMemo>\r\n\r\n        );\r\n    } ) )\r\n\r\n    return (\r\n        <div>\r\n            <Pagination className={\"pagination align-items-center justify-content-center\"}> {/*стиль мышки рука */}\r\n                <Pagination.Prev disabled={currentRangeLocal===1} onClick={() => {\r\n                    setPortion( \"prevPortion\" )\r\n                }}/> {/*диапазон пагинации вниз*/}\r\n                {renderSlicedPages} {/*отрисовка пагинации страниц внутри кнопок*/}\r\n                <Pagination.Next disabled={Math.ceil(totalPostsCount/(pageSize*portionSize)) <= currentRangeLocal} onClick={() => {\r\n                    setPortion( \"nextPortion\" )\r\n                }}/> {/*диапазон пагинации вверх*/}\r\n            </Pagination>\r\n        </div>\r\n    );\r\n} );\r\n\r\nexport default PaginationBS;\r\n","import {postType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSortFnType = (postsList: Array<postType>, sortHeaderDirection: boolean | undefined) => Array<postType>\r\nconst postListSortFn:postListSortFnType = (postsList, sortHeaderDirection) => {\r\n    sortHeaderDirection !== undefined &&\r\n    postsList.sort( (a: postType, b: postType) => { // сортируем массив постов по заголовкам\r\n        const partA = a.title.toLowerCase(); // ignore upper and lowercase\r\n        const partB = b.title.toLowerCase(); // ignore upper and lowercase\r\n        return sortHeaderDirection // если прямая/обратная сортировка\r\n            ? (partA > partB) ? 1 : -1 // прямая сортировка\r\n            : (partA < partB) ? 1 : -1 // возврат 1 или -1 для сортировки\r\n    } )\r\n\r\n    return postsList\r\n}\r\nexport default postListSortFn","import React, {memo} from \"react\";\r\ntype commentItemType = {\r\n    \"name\": string// заголовок комментария\r\n    \"email\": string, // почта того, кто оставил комментарий\r\n    \"body\": string // тело комментария\r\n}\r\nconst CommentItem: React.FC<commentItemType> = memo( ({email, name, body}) => {\r\n    console.log( \"мапинг комментариев\" )\r\n    return <div className='d-flex justify-content-end'>\r\n        <div className=\"card p-3 m-2\" style={{width: \"90%\"}}>\r\n\r\n            <b>{email}</b>\r\n            <div className='d-flex justify-content-end'>\r\n                <div style={{width: \"90%\"}}>{body}</div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n})\r\nexport default CommentItem","import React, {memo} from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport s from \"./Posts.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {commentType} from \"../../common/commonTypes/commonTypes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {globalStateType} from \"../../redux/store/store-redux\";\r\nimport CommentItem from \"./CommentItem\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\ntype postItemType = {\r\n    \"userId\": number, // ID автора статей\r\n    \"id\": number, // id статьи\r\n    \"title\": string, // заголовок статьи\r\n    \"body\": string // тело статьи\r\n    Avatar: string // общая картирнка аватара статьи\r\n    getComments: (id: number) => void // колбек для диспатча получить комментарии статьи\r\n}\r\nconst PostItem: React.FC<postItemType> = memo( ({body, title, userId, Avatar, id, getComments}) => {\r\n    console.log( \"PostItem\" )\r\n    const allComments: Array<commentType> =\r\n        useSelector( (state: globalStateType) => state.allPosts.allComments ) // получить комментарии\r\n    const showComments: Array<number> =\r\n        useSelector( (state: globalStateType) => state.allPosts.showComments ) // показать / скрыть комментарии\r\n    const commentsFilteredById: Array<commentType> = allComments.filter( comment => comment.postId === id )\r\n\r\n    return <div className='my-4'>\r\n        {/* аватарка автора поста со ссылкой на его страницу */}\r\n        <NavLink to={'/user-posts/' + userId}>\r\n            <Image fluid={true} src={Avatar} className=\"float-start my-2 mx-4 shadow rounded\" style={{width: \"5rem\"}}\r\n                   alt={\"Аватар пользователя\"} title={`Все посты пользователя ${userId}`}\r\n            />\r\n        </NavLink>\r\n        <h5><b>{title}</b></h5>\r\n        <div className=\"flex-grow-1 ms-3\">\r\n            <div> {body} </div>\r\n        </div>\r\n\r\n\r\n        <div className='d-flex justify-content-end my-2'>\r\n            <Button className='btn-sm btn-secondary' onClick={() => {\r\n                getComments( id )\r\n            }}>\r\n                Комментарии\r\n            </Button>\r\n        </div>\r\n\r\n        {showComments.includes( id ) && commentsFilteredById.map( (comment: commentType) => {\r\n            const {id, name, email, body} = comment\r\n            return <CommentItem key={id} name={name} body={body} email={email}/>\r\n        } )}\r\n\r\n    </div>\r\n} )\r\nexport default PostItem","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgAvatarDefault(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m 8 1 c -1.65625 0 -3 1.34375 -3 3 s 1.34375 3 3 3 s 3 -1.34375 3 -3 s -1.34375 -3 -3 -3 z m -1.5 7 c -2.492188 0 -4.5 2.007812 -4.5 4.5 v 0.5 c 0 1.109375 0.890625 2 2 2 h 8 c 1.109375 0 2 -0.890625 2 -2 v -0.5 c 0 -2.492188 -2.007812 -4.5 -4.5 -4.5 z m 0 0\",\n    fill: \"#2e3436\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvatarDefault);\nexport default __webpack_public_path__ + \"static/media/avatar-default.5dea226660157472ae3b2ae95d31764d.svg\";\nexport { ForwardRef as ReactComponent };","import {postType} from \"../../common/commonTypes/commonTypes\";\r\nimport React from \"react\";\r\nimport PostItem from \"./PostItem\";\r\nimport Avatar from \"../../assets/svg/avatar-default.svg\";\r\n\r\ntype renderPostsType = {\r\n    postsList: Array<postType>,\r\n    getComments: (postId: number) => void\r\n}\r\nconst RenderPosts:React.FC<renderPostsType> = ({postsList, getComments}) => {\r\n    console.log(\"RenderPosts\")\r\n    return <div>{\r\n        postsList// Во всех отсортированных и отфильтрованых постах с сервера\r\n            .map( (postItem, ind) => { // пробегаем по массиву\r\n                    const {body, id, title, userId} = postItem // извлекаем данные из массива постов\r\n                    return <PostItem key={ind} body={body} title={title}\r\n                                     userId={userId} Avatar={Avatar} id={id}\r\n                                     getComments={getComments}/> // отрисовка одного поста\r\n                }\r\n            )\r\n    }</div>\r\n}\r\nexport default RenderPosts","import {postType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListPaginFnType = (\r\n    postsList: Array<postType>,\r\n    pageSize: number,\r\n    сurrentPage: number\r\n) => Array<postType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListPaginFn: postListPaginFnType = (postsList, pageSize, сurrentPage) => {\r\n    return postsList.filter( (post: postType, ind: number) =>\r\n        ind >= (pageSize * (сurrentPage - 1)) && ind < (pageSize * сurrentPage) )\r\n}\r\nexport default postListPaginFn","import {postType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSearchFilterFnType = (\r\n    postsList: Array<postType>,\r\n    searchPostQuery:string\r\n) => Array<postType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListSearchFilterFn: postListSearchFilterFnType = (postsList, searchPostQuery) => {\r\n    return postsList.filter( (post: postType) => post.title.toLowerCase().includes( searchPostQuery.toLowerCase() ) )\r\n}\r\nexport default postListSearchFilterFn","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgNotFound(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 256 159\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M116.1,2.3c18.5,0,33.5,15,33.5,33.5s-15,33.5-33.5,33.5s-33.5-15-33.5-33.5S97.6,2.3,116.1,2.3z M242.9,60.3 c-12.1-6.3-28.3,1.9-37.1,18.7v0c-4,7.6-5.7,15.8-5,23.2c0.6,5.8,2.8,10.8,6.2,14.3l-8.6,14.4H160v-21.8c0-13.3-9.5-24.7-22.6-27.1 L70.2,69.8c-18-3.3-36,5.6-44.3,21.8l-22,42.6c-5.4,10.2,2,22.5,13.5,22.5l57,0c7.3,0,13.2-5.9,13.2-13.2s-5.9-13.2-13.2-13.2h-25 c-2.2,0-3.9-1.8-3.9-3.9s1.8-3.9,3.9-3.9h25c11.6,0,21,9.4,21,21c0,5-1.8,9.6-4.7,13.2h17.7l14.3,0l9.8-25.2v14 c0,6.2,5,11.2,11.2,11.2h55c7.1,0,12.9-5.8,12.9-12.9c0-2.8-0.9-5.5-2.5-7.6l8.6-14.3c0.9,0.1,1.9,0.2,2.9,0.2 c10.3,0,21.6-7.8,28.3-20.8C257.6,84.6,255,66.6,242.9,60.3z M238.4,95.9c-6,11.4-15.9,16.4-21.1,13.7c-3.4-1.8-4.3-6.1-4.6-8.6 c-0.5-5,0.8-11.1,3.7-16.6v0c6-11.4,15.9-16.4,21.1-13.7C242.7,73.5,244.3,84.5,238.4,95.9z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgNotFound);\nexport default __webpack_public_path__ + \"static/media/not-found.a6a557b67b76d97c1bcdeba00fc9b904.svg\";\nexport { ForwardRef as ReactComponent };","import React, {useCallback} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {globalStateType} from \"../../redux/store/store-redux\";\r\nimport {postType} from \"../../common/commonTypes/commonTypes\";\r\nimport {\r\n    allPostsActions,\r\n    paginationDataType,\r\n} from \"../../redux/reducers/all-posts-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport PaginationBS from \"../../common/Pagination/PaginationBS\";\r\nimport postListSortFn from \"./Functions/postListSortFn\";\r\nimport RenderPosts from \"./RenderPosts\";\r\nimport postListPaginFn from \"./Functions/postListPaginFn\";\r\nimport postListSearchFilterFn from \"./Functions/postListSearchFilterFn\";\r\nimport notFound from \"../../assets/svg/not-found.svg\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\ntype postsListRenderType = {\r\n    postsList: Array<postType>\r\n}\r\nconst PostsListRender: React.FC<postsListRenderType> = ( ({postsList}) => {\r\n\r\n    console.log( \"PostsListRender\" )\r\n    const dispatch = useDispatch()\r\n\r\n    //все данные пагинации\r\n    const paginationData: paginationDataType = useSelector( (state: globalStateType) => state.allPosts.paginationData )\r\n\r\n    const { // извлекаем переменные из пагинации\r\n        pageSize, сurrentPage, currentRangeLocal, portionSize,\r\n    } = paginationData\r\n\r\n    const setPaginationData = useCallback ((paginationData: paginationDataType) => { // мемоизируем колбек для обновления данных пагинации\r\n        dispatch( setPaginationDataAC( paginationData ) )\r\n    },[])\r\n\r\n    const {getCommentsByPostIdAC, setPaginationDataAC, setSearchPostQueryAC, setSortHeaderDirectionAC} = allPostsActions // извлекаем колбеки из allPostsActions\r\n\r\n    const getComments = useCallback( (postId: number) => { // мемоизируем колбек получения комментариев для ререндеров\r\n        dispatch( getCommentsByPostIdAC( postId ) )\r\n    }, [] )\r\n\r\n    // сделать полную копию полученых в пропсах постов\r\n    const postsListCopied: Array<postType> = structuredClone( postsList ) // полная копия массива постов\r\n\r\n    // извлечь статус загрузки\r\n    const isFetching: boolean = useSelector( (state: globalStateType) => state.app.isFetching ) // статус индикации загрузки\r\n\r\n    // извлечь поисковый запрос из стейта\r\n    const searchPostQuery: string = useSelector( (state: globalStateType) => state.allPosts.searchPostQuery ) //\r\n\r\n    // извлечь направления сортировки по заголовкам массива постов\r\n    const sortHeaderDirection: boolean | undefined = useSelector( (state: globalStateType) => state.allPosts.sortHeaderDirection )\r\n\r\n    // фильтруем заголовки на содержание поисковой строки (переводим в один регистр для стравнения)\r\n    let postsListFiltered: Array<postType> = postListSearchFilterFn(postsListCopied, searchPostQuery)\r\n\r\n    //сортируем фильтрованый список\r\n    const postsListFiltSort: Array<postType> = postListSortFn( postsListFiltered, sortHeaderDirection )\r\n\r\n    //Делаем пагинацию для отсортированого и отфильтрованого списка\r\n    const postsListFiltSortPagin: Array<postType> = postListPaginFn( postsListFiltSort, pageSize, сurrentPage )\r\n\r\n    const paginationRender = <PaginationBS // отрисовка пагинации\r\n        totalPostsCount={postsListFiltered.length} pageSize={pageSize}\r\n        сurrentPage={сurrentPage} currentRangeLocal={currentRangeLocal}\r\n        portionSize={portionSize} setPaginationData={setPaginationData}\r\n    />\r\n\r\n    const renderPosts = <RenderPosts postsList={postsListFiltSortPagin} getComments={getComments}/>\r\n\r\n    return <div>\r\n        {isFetching && <Preloader/>} {/*если идет загрузка, показать прелоадер*/}\r\n\r\n        {postsListFiltSortPagin.length>0 && paginationRender} {/*пагинация*/}\r\n\r\n        {postsListFiltSortPagin.length>0\r\n            ? renderPosts //отрисовка постов\r\n            :  <div className='d-flex justify-content-center my-5'>\r\n                {!isFetching && <div>\r\n                    <Image src={notFound} style={{width:\"7rem\"}}\r\n                           alt={\"ничего не найдено\"} title={\"ничего не найдено\"}\r\n                    />\r\n                    <h3>ничего не найдено</h3>\r\n                </div> }\r\n                </div> // если загрузка завершена и данных нет, отобразить уведомление\r\n        }\r\n\r\n    </div>\r\n} )\r\nexport default PostsListRender","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nlet withRouter = (Children) => {\n    const WithRouterWithProps = (props) => {\n        const itemId=Number({params: useParams()}.params['*']);\n        return <Children {...props} itemId={itemId}/>\n    }\n    return WithRouterWithProps\n}\nexport default withRouter\n","import {userDataType} from \"../../common/commonTypes/commonTypes\";\r\nimport React from \"react\";\r\nimport {Accordion, Col, ListGroup, Row} from \"react-bootstrap\";\r\n\r\ntype userCardType = {\r\n    userData: userDataType\r\n}\r\nconst UserCard: React.FC<userCardType> = ({userData}) => { // отрисовка карточки пользователя (автора постов)\r\n    const {id, name, username, email, address, phone, website, company} = userData\r\n    return <div className='my-3'>\r\n        <Accordion defaultActiveKey=\"0\" >\r\n            <Accordion.Item eventKey=\"0\">\r\n                <Accordion.Header><h4>{name} </h4></Accordion.Header>\r\n                <Accordion.Body>\r\n                    <Row>\r\n                        <Col className='p-2' lg={3} md={6}>{/*lg={6} md={12}*/}\r\n                            <ListGroup>\r\n                                <ListGroup.Item variant=\"primary\"><b>id:</b> {id}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"primary\"><b>username:</b> {username}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"primary\"><b>email:</b> {email}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"primary\"><b>phone:</b> {phone}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"primary\"><b>website:</b> {website}</ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <Col className='p-2'  lg={3} md={6}>\r\n                            <ListGroup >\r\n\r\n                                <ListGroup.Item variant=\"primary\"><b>address</b></ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>street:</b> {address?.street}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>suite:</b> {address?.suite}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>city:</b> {address?.city}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>zipcode:</b> {address?.zipcode}</ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n                        <Col className='p-2'  lg={3} md={6}>\r\n                            <ListGroup>\r\n\r\n                                <ListGroup.Item variant=\"primary\"><b>geo</b></ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>lat:</b>{address?.geo?.lat} </ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>lng:</b>{address?.geo?.lng}</ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n                        <Col className='p-2'  lg={3} md={6}>\r\n                            <ListGroup>\r\n\r\n                                <ListGroup.Item variant=\"primary\"><b>company</b></ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>name:</b> {company?.name}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>catchPhrase:</b> {company?.catchPhrase}</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"secondary\"><b>bs:</b> {company?.bs}</ListGroup.Item>\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n\r\n\r\n\r\n\r\n                </Accordion.Body>\r\n            </Accordion.Item>\r\n        </Accordion>\r\n\r\n\r\n    </div>\r\n}\r\nexport default UserCard","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {userActions} from \"../../redux/reducers/user-reducer\";\r\nimport {postType, userDataType} from \"../../common/commonTypes/commonTypes\";\r\nimport {globalStateType} from \"../../redux/store/store-redux\";\r\nimport PostsListRender from \"../PostsListRender/PostsListRender\";\r\nimport {allPostsActions, PostsInitialState} from \"../../redux/reducers/all-posts-reducer\";\r\nimport {compose} from \"redux\";\r\nimport withRouter from \"../../common/hoc/withRouter\";\r\nimport UserCard from \"./UserCard\";\r\n\r\ntype ownPropsType = {\r\n    itemId: number // id пользователя\r\n}\r\nconst UserCommon: React.FC<ownPropsType> = ({itemId}) => {\r\n    console.log( \"UserPosts\" )\r\n\r\n    const dispatch = useDispatch()\r\n    const allPosts: Array<postType> = useSelector( (state: globalStateType) => state.allPosts.allPosts )  //все посты с сервера\r\n    const userData: userDataType = useSelector( (state: globalStateType) => state.user.userData )  //данные автора статей по его ID\r\n\r\n    //отфильтровать посты только по Id выбранного пользователя\r\n    const allPostsFilteredByUser: Array<postType> = allPosts.filter((post:postType)=>post.userId===itemId)\r\n\r\n    useEffect(()=>{\r\n        dispatch( userActions.getUserDataAC(itemId)  )//получить данные пользователя по его Id\r\n        dispatch( allPostsActions.setPaginationDataAC( PostsInitialState.paginationData ) ) // занулить пагинацию\r\n    },[dispatch, itemId])\r\n\r\n    return <div>\r\n        <h2 className='d-flex justify-content-center'>О пользователе</h2>\r\n        <UserCard userData={userData}/>\r\n        <h4 className='d-flex justify-content-center'>Опубликованные посты</h4>\r\n\r\n        <PostsListRender postsList={allPostsFilteredByUser}/>\r\n\r\n    </div>\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter// получить данные ID из URL браузера и добавить в пропсы\r\n)( UserCommon )\r\n"],"names":["memo","_ref","totalPostsCount","pageSize","сurrentPage","currentRangeLocal","portionSize","setPaginationData","console","log","pagesCount","Math","ceil","pages","i","push","portionSizeLeft","portionSizeRight","slicedPages2","filter","p","setPortion","setPortionValue","PaginationItemMemo","Pagination","Item","renderSlicedPages","map","_jsxs","active","onClick","children","_jsx","className","Prev","disabled","Next","postsList","sortHeaderDirection","undefined","sort","a","b","partA","title","toLowerCase","partB","email","body","name","style","width","userId","Avatar","id","getComments","allComments","useSelector","state","allPosts","showComments","commentsFilteredById","comment","postId","NavLink","to","Image","fluid","src","alt","concat","Button","includes","CommentItem","postItem","ind","PostItem","post","searchPostQuery","dispatch","useDispatch","paginationData","useCallback","setPaginationDataAC","getCommentsByPostIdAC","allPostsActions","setSearchPostQueryAC","setSortHeaderDirectionAC","postsListCopied","structuredClone","isFetching","app","postsListFiltered","postListSearchFilterFn","postsListFiltSort","postListSortFn","postsListFiltSortPagin","postListPaginFn","paginationRender","PaginationBS","length","renderPosts","RenderPosts","Preloader","notFound","Children","props","itemId","Number","useParams","_objectSpread","_address$geo","_address$geo2","userData","username","address","phone","website","company","Accordion","defaultActiveKey","eventKey","Header","Body","Row","Col","lg","md","ListGroup","variant","street","suite","city","zipcode","geo","lat","lng","catchPhrase","bs","compose","withRouter","user","allPostsFilteredByUser","useEffect","userActions","getUserDataAC","PostsInitialState","UserCard","PostsListRender"],"sourceRoot":""}