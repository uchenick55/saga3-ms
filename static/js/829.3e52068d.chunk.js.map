{"version":3,"file":"static/js/829.3e52068d.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/PageItem.js","../node_modules/react-bootstrap/esm/Pagination.js","webpack://saga3-ms/./src/common/Pagination/Pagination.module.css?0156","common/Pagination/PaginationBS.tsx","components/PostsListRender/Functions/postListSortFn.ts","components/PostsListRender/CommentItem.tsx","../node_modules/react-bootstrap/esm/Button.js","components/PostsListRender/PostItem.tsx","assets/svg/avatar-default.svg","components/PostsListRender/RenderPosts.tsx","components/PostsListRender/Functions/postListPaginFn.ts","components/PostsListRender/Functions/postListSearchFilterFn.ts","components/PostsListRender/PostsListRender.tsx"],"sourcesContent":["/* eslint-disable react/no-multi-comp */\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst PageItem = /*#__PURE__*/React.forwardRef(({\n  active = false,\n  disabled = false,\n  className,\n  style,\n  activeLabel = '(current)',\n  children,\n  ...props\n}, ref) => {\n  const Component = active || disabled ? 'span' : Anchor;\n  return /*#__PURE__*/_jsx(\"li\", {\n    ref: ref,\n    style: style,\n    className: classNames(className, 'page-item', {\n      active,\n      disabled\n    }),\n    children: /*#__PURE__*/_jsxs(Component, {\n      className: \"page-link\",\n      ...props,\n      children: [children, active && activeLabel && /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: activeLabel\n      })]\n    })\n  });\n});\nPageItem.displayName = 'PageItem';\nexport default PageItem;\nfunction createButton(name, defaultValue, label = name) {\n  const Button = /*#__PURE__*/React.forwardRef(({\n    children,\n    ...props\n  }, ref) => /*#__PURE__*/_jsxs(PageItem, {\n    ...props,\n    ref: ref,\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      children: children || defaultValue\n    }), /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    })]\n  }));\n  Button.displayName = name;\n  return Button;\n}\nexport const First = createButton('First', '«');\nexport const Prev = createButton('Prev', '‹', 'Previous');\nexport const Ellipsis = createButton('Ellipsis', '…', 'More');\nexport const Next = createButton('Next', '›');\nexport const Last = createButton('Last', '»');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport PageItem, { Ellipsis, First, Last, Next, Prev } from './PageItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Pagination = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  size,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'pagination');\n  return /*#__PURE__*/_jsx(\"ul\", {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, size && `${decoratedBsPrefix}-${size}`)\n  });\n});\nPagination.displayName = 'Pagination';\nexport default Object.assign(Pagination, {\n  First,\n  Prev,\n  Ellipsis,\n  Item: PageItem,\n  Next,\n  Last\n});","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__JB8vP\"};","import React, {memo} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport classes from \"./Pagination.module.css\"\r\nimport {PaginationDataType} from \"../../redux/reducers/all-posts-reducer\";\r\n\r\ntype PaginationBSType = PaginationDataType & {\r\n    TotalPostsCount: number, // общее число постов на сервере\r\n    setPaginationData: (PaginationData:PaginationDataType) => void// экшн креатор записи в стейт комментариев по ID статьи\r\n}\r\n\r\nconst PaginationBS: React.FC<PaginationBSType> = memo ( (\r\n    {\r\n        TotalPostsCount, // общее число постов на сервере\r\n        PageSize, // количество постов на одной странице\r\n        CurrentPage, // текущая страница пагинации\r\n        CurrentRangeLocal, // текущий диапазон пагинации\r\n        PortionSize,// количество отображаемых страниц пагинации между порциями\r\n        setPaginationData, // экшн креатор записи в стейт комментариев по ID статьи\r\n    }) => {\r\n    console.log( \"PaginationBS\" )\r\n    const PagesCount = Math.ceil( TotalPostsCount / PageSize ); // сколько всего страниц можно вызвать\r\n    //с постами пачками по PageSize\r\n    const pages = []; // определяем массив страниц под все элементы\r\n    for (let i = 1; i <= PagesCount; i++) {\r\n        // В этот массив\r\n        pages.push( i ); // добавляем все страницы элементов\r\n    }\r\n\r\n    const PortionSizeLeft = 1 + PortionSize * (CurrentRangeLocal - 1); // Нижнее значение порций (не меньше 1)\r\n    const PortionSizeRight = PortionSize * CurrentRangeLocal; // Верхнее значение страниц (не больше PagesCount)\r\n    const slicedPages2 = pages.filter(\r\n        // фильтруем весь массив страниц элементов\r\n        (p) => p >= PortionSizeLeft && p <= PortionSizeRight // оставляем только в заданном диапазоне\r\n    );\r\n\r\n    type setPortionValueType = \"prevPortion\" | \"nextPortion\"\r\n    const setPortion = (setPortionValue: setPortionValueType) => { // задать текущую порцию пагинации\r\n        if (setPortionValue === \"prevPortion\" && CurrentRangeLocal > 1) // если мы жмем prevPortion\r\n        {\r\n            setPaginationData({\r\n                PageSize:PageSize, CurrentPage: CurrentPage,\r\n                PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal -1,// уменьшаем диапазон на 1\r\n            })\r\n        }\r\n        if (setPortionValue === \"nextPortion\") // если мы жмем nextPortion\r\n        {\r\n            setPaginationData({\r\n                PageSize:PageSize, CurrentPage: CurrentPage,\r\n                PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal +1,// увеличиваем диапазон на 1\r\n            })\r\n        }\r\n    };\r\n    const PaginationItemMemo = memo( Pagination.Item )\r\n\r\n    const renderSlicedPages = ( slicedPages2.map( (p) => { // мапинг отобранного массива\r\n        return (\r\n            <PaginationItemMemo // пагинация бутстрапа\r\n                active={p === CurrentPage} // акттивная страница\r\n                key={p} // ключ\r\n                onClick={() => { // по клику\r\n                    p!== CurrentPage && // кликать по текущей странице пагинации нельзя\r\n                    setPaginationData({\r\n                        PageSize:PageSize, CurrentPage: p,// смена текущей страницы после клика\r\n                        PortionSize: PortionSize, CurrentRangeLocal: CurrentRangeLocal,\r\n                    })\r\n                }}\r\n            >\r\n                {p} {/*отрисовать номер страницы в пагинации*/}\r\n            </PaginationItemMemo>\r\n\r\n        );\r\n    } ) )\r\n\r\n    return (\r\n        <div className={classes.pagination}>\r\n            <Pagination className={\"pagination align-items-center justify-content-center\"}> {/*стиль мышки рука */}\r\n                <Pagination.Prev disabled={CurrentRangeLocal===1} onClick={() => {\r\n                    setPortion( \"prevPortion\" )\r\n                }}/> {/*диапазон пагинации вниз*/}\r\n                {renderSlicedPages} {/*отрисовка пагинации страниц внутри кнопок*/}\r\n                <Pagination.Next disabled={Math.ceil(TotalPostsCount/(PageSize*PortionSize)) <= CurrentRangeLocal} onClick={() => {\r\n                    setPortion( \"nextPortion\" )\r\n                }}/> {/*диапазон пагинации вверх*/}\r\n            </Pagination>\r\n        </div>\r\n    );\r\n} );\r\n\r\nexport default PaginationBS;\r\n","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSortFnType = (PostsList: Array<PostType>, sortHeaderDirection: boolean | undefined) => Array<PostType>\r\nconst postListSortFn:postListSortFnType = (PostsList, sortHeaderDirection) => {\r\n    sortHeaderDirection !== undefined &&\r\n    PostsList.sort( (a: PostType, b: PostType) => { // сортируем массив постов по заголовкам\r\n        const partA = a.title.toLowerCase(); // ignore upper and lowercase\r\n        const partB = b.title.toLowerCase(); // ignore upper and lowercase\r\n        return sortHeaderDirection // если прямая/обратная сортировка\r\n            ? (partA > partB) ? 1 : -1 // прямая сортировка\r\n            : (partA < partB) ? 1 : -1 // возврат 1 или -1 для сортировки\r\n    } )\r\n\r\n    return PostsList\r\n}\r\nexport default postListSortFn","import React, {memo} from \"react\";\r\ntype CommentItemType = {\r\n    \"name\": string// заголовок комментария\r\n    \"email\": string, // почта того, кто оставил комментарий\r\n    \"body\": string // тело комментария\r\n}\r\nconst CommentItem: React.FC<CommentItemType> = memo( ({email, name, body}) => {\r\n    console.log( \"мапинг комментариев\" )\r\n    return <div className='d-flex justify-content-end'>\r\n        <div className=\"card p-3 m-2\" style={{width: \"90%\"}}>\r\n\r\n            <b>{email}</b>\r\n            <div className='d-flex justify-content-end'>\r\n                <div style={{width: \"90%\"}}>{body}</div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n})\r\nexport default CommentItem","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","import React, {memo} from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport s from \"./Posts.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CommentType} from \"../../common/commonTypes/commonTypes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../redux/store/store-redux\";\r\nimport CommentItem from \"./CommentItem\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\ntype PostItemType = {\r\n    \"userId\": number, // ID автора статей\r\n    \"id\": number, // id статьи\r\n    \"title\": string, // заголовок статьи\r\n    \"body\": string // тело статьи\r\n    Avatar: string // общая картирнка аватара статьи\r\n    getComments: (id: number) => void // колбек для диспатча получить комментарии статьи\r\n}\r\nconst PostItem: React.FC<PostItemType> = memo( ({body, title, userId, Avatar, id, getComments}) => {\r\n    console.log( \"PostItem\" )\r\n    const AllComments: Array<CommentType> =\r\n        useSelector( (state: GlobalStateType) => state.allPosts.AllComments ) // получить комментарии\r\n    const ShowComments: Array<number> =\r\n        useSelector( (state: GlobalStateType) => state.allPosts.ShowComments ) // показать / скрыть комментарии\r\n    const CommentsFilteredById: Array<CommentType> = AllComments.filter( comment => comment.postId === id )\r\n\r\n    return <div className='my-5'>\r\n        {/* аватарка автора поста со ссылкой на его страницу */}\r\n        <NavLink to={'/user-posts/' + userId}>\r\n            <Image fluid={true} src={Avatar} className=\"float-start my-2 mx-4 shadow\" style={{width: \"5rem\"}}\r\n                   alt={\"Аватар пользователя\"} title={`Все посты пользователя ${userId}`}\r\n            />\r\n        </NavLink>\r\n        <h5><b>{title}</b></h5>\r\n        <div className=\"flex-grow-1 ms-3\">\r\n            <div> {body} </div>\r\n        </div>\r\n\r\n\r\n        <div className='d-flex justify-content-end my-2'>\r\n            <Button className='btn-sm btn-secondary' onClick={() => {\r\n                getComments( id )\r\n            }}>\r\n                Комментарии\r\n            </Button>\r\n        </div>\r\n\r\n        {ShowComments.includes( id ) && CommentsFilteredById.map( (comment: CommentType) => {\r\n            const {id, name, email, body} = comment\r\n            return <CommentItem key={id} name={name} body={body} email={email}/>\r\n        } )}\r\n\r\n    </div>\r\n} )\r\nexport default PostItem","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgAvatarDefault(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m 8 1 c -1.65625 0 -3 1.34375 -3 3 s 1.34375 3 3 3 s 3 -1.34375 3 -3 s -1.34375 -3 -3 -3 z m -1.5 7 c -2.492188 0 -4.5 2.007812 -4.5 4.5 v 0.5 c 0 1.109375 0.890625 2 2 2 h 8 c 1.109375 0 2 -0.890625 2 -2 v -0.5 c 0 -2.492188 -2.007812 -4.5 -4.5 -4.5 z m 0 0\",\n    fill: \"#2e3436\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvatarDefault);\nexport default __webpack_public_path__ + \"static/media/avatar-default.5dea226660157472ae3b2ae95d31764d.svg\";\nexport { ForwardRef as ReactComponent };","import {PostType} from \"../../common/commonTypes/commonTypes\";\r\nimport React from \"react\";\r\nimport PostItem from \"./PostItem\";\r\nimport Avatar from \"../../assets/svg/avatar-default.svg\";\r\n\r\ntype RenderPostsType = {\r\n    PostsList: Array<PostType>,\r\n    getComments: (postId: number) => void\r\n}\r\nconst RenderPosts:React.FC<RenderPostsType> = ({PostsList, getComments}) => {\r\n    console.log(\"RenderPosts\")\r\n    return <div>{\r\n        PostsList// Во всех отсортированных и отфильтрованых постах с сервера\r\n            .map( (postItem, ind) => { // пробегаем по массиву\r\n                    const {body, id, title, userId} = postItem // извлекаем данные из массива постов\r\n                    return <PostItem key={ind} body={body} title={title}\r\n                                     userId={userId} Avatar={Avatar} id={id}\r\n                                     getComments={getComments}/> // отрисовка одного поста\r\n                }\r\n            )\r\n    }</div>\r\n}\r\nexport default RenderPosts","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListPaginFnType = (\r\n    PostsList: Array<PostType>,\r\n    PageSize: number,\r\n    CurrentPage: number\r\n) => Array<PostType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListPaginFn: postListPaginFnType = (PostsList, PageSize, CurrentPage) => {\r\n    return PostsList.filter( (post: PostType, ind: number) =>\r\n        ind >= (PageSize * (CurrentPage - 1)) && ind < (PageSize * CurrentPage) )\r\n}\r\nexport default postListPaginFn","import {PostType} from \"../../../common/commonTypes/commonTypes\";\r\n\r\ntype postListSearchFilterFnType = (\r\n    PostsList: Array<PostType>,\r\n    SearchPostQuery:string\r\n) => Array<PostType>\r\n//делим посты в соответствии с пагинацией\r\nconst postListSearchFilterFn: postListSearchFilterFnType = (PostsList, SearchPostQuery) => {\r\n    return PostsList.filter( (post: PostType) => post.title.toLowerCase().includes( SearchPostQuery.toLowerCase() ) )\r\n}\r\nexport default postListSearchFilterFn","import React, {memo, useCallback, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../redux/store/store-redux\";\r\nimport {PostType} from \"../../common/commonTypes/commonTypes\";\r\nimport {\r\n    AllPostsActions,\r\n    PaginationDataType,\r\n    PostsInitialState\r\n} from \"../../redux/reducers/all-posts-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport PaginationBS from \"../../common/Pagination/PaginationBS\";\r\nimport postListSortFn from \"./Functions/postListSortFn\";\r\nimport PostsInputRender from \"./PostsInputRender\";\r\nimport RenderSortButton from \"./RenderSortButton\";\r\nimport RenderPosts from \"./RenderPosts\";\r\nimport postListPaginFn from \"./Functions/postListPaginFn\";\r\nimport postListSearchFilterFn from \"./Functions/postListSearchFilterFn\";\r\n\r\ntype PostsListRenderType = {\r\n    PostsList: Array<PostType>\r\n}\r\nconst PostsListRender: React.FC<PostsListRenderType> = ( ({PostsList}) => {\r\n\r\n    console.log( \"PostsListRender\" )\r\n    const dispatch = useDispatch()\r\n\r\n    //все данные пагинации\r\n    const PaginationData: PaginationDataType = useSelector( (state: GlobalStateType) => state.allPosts.PaginationData )\r\n\r\n    const { // извлекаем переменные из пагинации\r\n        PageSize, CurrentPage, CurrentRangeLocal, PortionSize,\r\n    } = PaginationData\r\n\r\n    const setPaginationData = useCallback ((PaginationData: PaginationDataType) => { // мемоизируем колбек для обновления данных пагинации\r\n        dispatch( setPaginationDataAC( PaginationData ) )\r\n    },[])\r\n\r\n    const {getCommentsByPostIdAC, setPaginationDataAC, setSearchPostQueryAC, setSortHeaderDirectionAC} = AllPostsActions // извлекаем колбеки из AllPostsActions\r\n\r\n    const getComments = useCallback( (postId: number) => { // мемоизируем колбек получения комментариев для ререндеров\r\n        dispatch( getCommentsByPostIdAC( postId ) )\r\n    }, [] )\r\n\r\n    // сделать полную копию полученых в пропсах постов\r\n    const PostsListCopied: Array<PostType> = structuredClone( PostsList ) // полная копия массива постов\r\n\r\n    // извлечь статус загрузки\r\n    const isFetching: boolean = useSelector( (state: GlobalStateType) => state.app.isFetching ) // статус индикации загрузки\r\n\r\n    // извлечь поисковый запрос из стейта\r\n    const SearchPostQuery: string = useSelector( (state: GlobalStateType) => state.allPosts.SearchPostQuery ) //\r\n\r\n    // извлечь направления сортировки по заголовкам массива постов\r\n    const sortHeaderDirection: boolean | undefined = useSelector( (state: GlobalStateType) => state.allPosts.SortHeaderDirection )\r\n\r\n    // фильтруем заголовки на содержание поисковой строки (переводим в один регистр для стравнения)\r\n    let PostsListFiltered: Array<PostType> = postListSearchFilterFn(PostsListCopied, SearchPostQuery)\r\n\r\n    //сортируем фильтрованый список\r\n    const PostsListFiltSort: Array<PostType> = postListSortFn( PostsListFiltered, sortHeaderDirection )\r\n\r\n    //Делаем пагинацию для отсортированого и отфильтрованого списка\r\n    const PostsListFiltSortPagin: Array<PostType> = postListPaginFn( PostsListFiltSort, PageSize, CurrentPage )\r\n\r\n    const paginationRender = <PaginationBS // отрисовка пагинации\r\n        TotalPostsCount={PostsListFiltered.length} PageSize={PageSize}\r\n        CurrentPage={CurrentPage} CurrentRangeLocal={CurrentRangeLocal}\r\n        PortionSize={PortionSize} setPaginationData={setPaginationData}\r\n    />\r\n\r\n    const renderPosts = <RenderPosts PostsList={PostsListFiltSortPagin} getComments={getComments}/>\r\n\r\n    return <div>\r\n        {isFetching && <Preloader/>} {/*если идет загрузка, показать прелоадер*/}\r\n\r\n        {paginationRender} {/*пагинация*/}\r\n\r\n        {PostsListFiltSortPagin.length>0\r\n            ? renderPosts //отрисовка постов\r\n            : <div>ничего не найдено</div>\r\n        }\r\n    </div>\r\n} )\r\nexport default PostsListRender"],"names":["PageItem","React","_ref","ref","_ref$active","active","_ref$disabled","disabled","className","style","_ref$activeLabel","activeLabel","children","props","_objectWithoutProperties","_excluded","Component","Anchor","_jsx","classNames","_jsxs","_objectSpread","displayName","createButton","name","defaultValue","label","arguments","length","undefined","Button","_ref2","_excluded2","First","Prev","Ellipsis","Next","Last","Pagination","bsPrefix","size","decoratedBsPrefix","useBootstrapPrefix","concat","Object","assign","Item","memo","TotalPostsCount","PageSize","CurrentPage","CurrentRangeLocal","PortionSize","setPaginationData","console","log","PagesCount","Math","ceil","pages","i","push","PortionSizeLeft","PortionSizeRight","slicedPages2","filter","p","setPortion","setPortionValue","PaginationItemMemo","renderSlicedPages","map","onClick","classes","PostsList","sortHeaderDirection","sort","a","b","partA","title","toLowerCase","partB","email","body","width","as","_ref$variant","variant","prefix","_useButtonProps","useButtonProps","tagName","_useButtonProps2","_slicedToArray","buttonProps","href","userId","Avatar","id","getComments","AllComments","useSelector","state","allPosts","ShowComments","CommentsFilteredById","comment","postId","NavLink","to","Image","fluid","src","alt","includes","CommentItem","postItem","ind","PostItem","post","SearchPostQuery","dispatch","useDispatch","PaginationData","useCallback","setPaginationDataAC","getCommentsByPostIdAC","AllPostsActions","setSearchPostQueryAC","setSortHeaderDirectionAC","PostsListCopied","structuredClone","isFetching","app","SortHeaderDirection","PostsListFiltered","postListSearchFilterFn","PostsListFiltSort","postListSortFn","PostsListFiltSortPagin","postListPaginFn","paginationRender","PaginationBS","renderPosts","RenderPosts","Preloader"],"sourceRoot":""}